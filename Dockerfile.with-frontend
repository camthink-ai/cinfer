# Multi-stage build for frontend and backend integration
FROM node:22-slim AS frontend-builder

# Install pnpm
RUN npm install -g pnpm

# Set working directory for frontend
WORKDIR /frontend

# Copy frontend package files and scripts first
COPY web/package.json web/pnpm-lock.yaml web/pnpm-workspace.yaml ./
COPY web/.npmrc ./
COPY web/packages ./packages
COPY web/apps ./apps
COPY web/scripts ./scripts
COPY web/tsconfig.json ./tsconfig.json

# Install frontend dependencies
RUN pnpm install

# Build frontend
RUN pnpm run build

# Backend stage
FROM python:3.10-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create required directories
RUN mkdir -p data/models data/logs data/db data/temp_uploads static

# Copy frontend build artifacts from the frontend-builder stage
COPY --from=frontend-builder /frontend/apps/web/dist/ /app/static/

# Add StaticFiles to main.py if it doesn't exist
RUN if ! grep -q "StaticFiles" main.py; then \
    sed -i '/from fastapi import FastAPI/a from fastapi.staticfiles import StaticFiles' main.py && \
    sed -i '/# --- Root Endpoint ---/i # --- Static Files ---\napp.mount("/", StaticFiles(directory="static", html=True), name="static")\n' main.py; \
    fi

# Copy the entrypoint script
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
# Give execution permission
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose the API port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Run the application
CMD ["python", "run.py", "--prod", "--host", "0.0.0.0"] 