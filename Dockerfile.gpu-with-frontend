# Multi-stage build for frontend and backend integration
FROM node:22-slim AS frontend-builder

# Install pnpm
RUN npm install -g pnpm

# Set working directory for frontend
WORKDIR /frontend

# Copy frontend package files and scripts first
COPY web/package.json web/pnpm-lock.yaml web/pnpm-workspace.yaml ./
COPY web/.npmrc ./
COPY web/packages ./packages
COPY web/apps ./apps
COPY web/scripts ./scripts
COPY web/tsconfig.json ./tsconfig.json

# Install frontend dependencies
RUN pnpm install

# Build frontend
RUN pnpm run build

# Backend GPU stage
FROM nvidia/cuda:12.4.0-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/lib:$LD_LIBRARY_PATH

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-setuptools \
    build-essential \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Make python3.10 the default python3
RUN ln -sf /usr/bin/python3.10 /usr/bin/python3 && \
    ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

WORKDIR /app

# Install cuDNN
COPY cudnn-linux-x86_64-9.1.0.70_cuda12-archive.tar.xz /tmp/
RUN mkdir -p /tmp/cudnn && \
    tar -xf /tmp/cudnn-linux-x86_64-9.1.0.70_cuda12-archive.tar.xz -C /tmp/cudnn && \
    cp -r /tmp/cudnn/cudnn-linux-x86_64-9.1.0.70_cuda12-archive/include/* /usr/local/include/ && \
    cp -r /tmp/cudnn/cudnn-linux-x86_64-9.1.0.70_cuda12-archive/lib/* /usr/local/lib/ && \
    chmod a+r /usr/local/include/cudnn*.h /usr/local/lib/libcudnn* && \
    rm -rf /tmp/cudnn* /tmp/cudnn-linux-x86_64-9.1.0.70_cuda12-archive.tar.xz

# Install TensorRT
COPY TensorRT-10.0.1.6.Linux.x86_64-gnu.cuda-12.4.tar.gz /tmp/
RUN mkdir -p /tmp/tensorrt && \
    tar -xzf /tmp/TensorRT-10.0.1.6.Linux.x86_64-gnu.cuda-12.4.tar.gz -C /tmp/tensorrt && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/include/* /usr/local/include/ && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/lib/* /usr/local/lib/ && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/bin/* /usr/local/bin/ && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/python /usr/local/ && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/data /usr/local/ && \
    cp -r /tmp/tensorrt/TensorRT-10.0.1.6/targets /usr/local/ && \
    rm -rf /tmp/tensorrt /tmp/TensorRT-10.0.1.6.Linux.x86_64-gnu.cuda-12.4.tar.gz

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install GPU-specific packages for CUDA 12.4
RUN pip install --no-cache-dir torch==2.2.0+cu121 torchvision==0.17.0+cu121 --extra-index-url https://download.pytorch.org/whl/cu121 && \
    pip install --no-cache-dir onnxruntime-gpu==1.22.0 && \
    pip install --no-cache-dir onnx==1.18.0 && \
    pip install --no-cache-dir openvino-dev==2024.6.0 && \
    pip install --no-cache-dir paddleocr==3.0.0 && \
    pip install --no-cache-dir paddlepaddle-gpu==3.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple

# Install TensorRT Python packages if available
RUN if [ -f /usr/local/python/tensorrt-10.0.1.6-cp310-none-linux_x86_64.whl ]; then \
      pip install /usr/local/python/tensorrt-10.0.1.6-cp310-none-linux_x86_64.whl \
                  /usr/local/python/tensorrt_dispatch-10.0.1.6-cp310-none-linux_x86_64.whl \
                  /usr/local/python/tensorrt_lean-10.0.1.6-cp310-none-linux_x86_64.whl; \
    fi

# Copy application code
COPY . .

# Create required directories
RUN mkdir -p data/models data/logs data/db data/temp_uploads static

# Copy frontend build artifacts from the frontend-builder stage
COPY --from=frontend-builder /frontend/apps/web/dist/ /app/static/

# Add StaticFiles to main.py if it doesn't exist
RUN if ! grep -q "StaticFiles" main.py; then \
    sed -i '/from fastapi import FastAPI/a from fastapi.staticfiles import StaticFiles' main.py && \
    sed -i '/# --- Root Endpoint ---/i # --- Static Files ---\napp.mount("/", StaticFiles(directory="static", html=True), name="static")\n' main.py; \
    fi

# Copy the entrypoint script
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
# Give execution permission
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose the API port
EXPOSE 8000

# Run the application
CMD ["python", "run.py", "--prod", "--host", "0.0.0.0"] 