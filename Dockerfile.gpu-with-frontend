# Multi-stage build for frontend and backend integration
FROM node:22-slim AS frontend-builder

# Install pnpm
RUN npm install -g pnpm

# Set working directory for frontend
WORKDIR /frontend

# Copy frontend package files and scripts first
COPY web/package.json web/pnpm-lock.yaml web/pnpm-workspace.yaml ./
COPY web/.npmrc ./
COPY web/packages ./packages
COPY web/apps ./apps
COPY web/scripts ./scripts
COPY web/tsconfig.json ./tsconfig.json

# Install frontend dependencies
RUN pnpm install

# Build frontend
RUN pnpm run build

# BASE IMAGE
FROM nvidia/cuda:12.4.0-devel-ubuntu22.04

# ENVIRONMENT VARIABLES
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/lib:$LD_LIBRARY_PATH

# SYSTEM DEPENDENCIES
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-setuptools \
    build-essential \
    wget \
    git \
    gcc \
    g++ \
    libglib2.0-0 \
    libglib2.0-dev \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgl1 \
    && rm -rf /var/lib/apt/lists/*

# set Python default version
RUN ln -sf /usr/bin/python3.10 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# COPY local install packages (like TensorRT)
COPY backend_apps /tmp/apps/
WORKDIR /tmp/apps


# install cuDNN
ARG CUDNN_ARCHIVE=cudnn-linux-x86_64-9.1.0.70_cuda12-archive.tar.xz
RUN tar -xJf ${CUDNN_ARCHIVE}  && \
    cp cudnn-linux-x86_64-9.1.0.70_cuda12-archive/lib/* /usr/local/cuda-12.4/lib64/ && \
    cp cudnn-linux-x86_64-9.1.0.70_cuda12-archive/include/* /usr/local/cuda-12.4/include/ 
    

# install TensorRT
ARG TENSORRT_ARCHIVE=TensorRT-10.0.1.6.Linux.x86_64-gnu.cuda-12.4.tar.gz
RUN tar -zxf ${TENSORRT_ARCHIVE} -C /usr/local/ && \
    rm -rf /tmp/apps
    

ENV LD_LIBRARY_PATH=/usr/local/TensorRT-10.0.1.6/lib:$LD_LIBRARY_PATH

# application dependencies
WORKDIR /app

# copy requirements.txt
COPY requirements.txt .

# install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 && \
    pip install --no-cache-dir onnxruntime-gpu==1.22.0 && \
    pip install --no-cache-dir onnx==1.18.0 && \
    pip install --no-cache-dir openvino-dev==2024.6.0 && \
    pip install --no-cache-dir paddleocr==3.0.0 && \
    python -m pip install --no-cache-dir paddlepaddle-gpu==3.0.0 -i https://www.paddlepaddle.org.cn/packages/stable/cu126/ && \
    pip install --no-cache-dir pycuda || echo "PyCUDA 安装失败，跳过" && \
    pip install /usr/local/TensorRT-10.0.1.6/python/tensorrt-*-cp310-*.whl || echo "TensorRT 安装失败，跳过"
    



# Copy application code
COPY . .

# delete unnecessary files
RUN rm -rf /app/backend_apps

# Create required directories
RUN mkdir -p data/models data/logs data/db data/temp_uploads static

# Copy frontend build artifacts from the frontend-builder stage
COPY --from=frontend-builder /frontend/apps/web/dist/ /app/static/

# Add StaticFiles to main.py if it doesn't exist
RUN if ! grep -q "StaticFiles" main.py; then \
    sed -i '/from fastapi import FastAPI/a from fastapi.staticfiles import StaticFiles' main.py && \
    sed -i '/# --- Root Endpoint ---/i # --- Static Files ---\napp.mount("/", StaticFiles(directory="static", html=True), name="static")\n' main.py; \
    fi

# Copy the entrypoint script
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
# Give execution permission
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose the API port
EXPOSE 8000

# Run the application
CMD ["python", "run.py", "--prod", "--host", "0.0.0.0"]