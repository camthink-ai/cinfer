# cinfer/schemas/users.py
from pydantic import BaseModel, Field, EmailStr, ConfigDict
from typing import Optional
from datetime import datetime

class UserBase(BaseModel):
    """
    Base schema for user data.
    Fields commonly shared for creation and reading.
    """
    username: str = Field(..., description="Unique username")
    # email: Optional[EmailStr] = Field(None, description="User's email address") # Not in DB schema but often useful
    is_admin: bool = Field(False, description="Flag to indicate if user is an administrator")
    status: Optional[str] = Field("active", description="User status, e.g., active, inactive, banned") #

class UserCreate(UserBase):
    """
    Schema for creating a new user.
    Includes password which is write-only.
    """
    password: str = Field(..., min_length=8, description="User's password (will be hashed)")

class UserUpdate(BaseModel):
    """
    Schema for updating an existing user.
    All fields are optional for partial updates.
    """
    username: Optional[str] = Field(None, description="New username")
    # email: Optional[EmailStr] = Field(None, description="New email address")
    password: Optional[str] = Field(None, min_length=8, description="New password (will be hashed)")
    is_admin: Optional[bool] = Field(None, description="Update administrator status")
    status: Optional[str] = Field(None, description="Update user status")


class UserInDBBase(UserBase):
    """
    Base schema for user data as stored in the database.
    Includes fields that are generated by the database or system.
    """
    model_config = ConfigDict(from_attributes=True)
    id: str = Field(..., description="Unique user ID (e.g., UUID)") #
    created_at: datetime = Field(..., description="Timestamp of user creation") #
    last_login: Optional[datetime] = Field(None, description="Timestamp of last login") #


class User(UserInDBBase):
    """
    Schema for representing a user in API responses.
    Excludes sensitive data like password_hash.
    """
    pass # Inherits all fields from UserInDBBase

class UserInDB(UserInDBBase):
    """
    Schema representing the full user data in the database, including hashed password.
    This should generally not be returned in API responses.
    """
    password_hash: str = Field(..., description="Hashed password") #


class UserInfo(BaseModel):
    """
    Schema representing the user data in the database, excluding hashed password.
    """
    id: str = Field(..., description="Unique user ID (e.g., UUID)") #
    username: str = Field(..., description="Unique username")
    is_admin: bool = Field(False, description="Flag to indicate if user is an administrator")
    status: Optional[str] = Field("active", description="User status, e.g., active, inactive, banned") #
